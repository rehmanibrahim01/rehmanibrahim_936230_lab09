print("QUESTION1")
class Shape:
    def __init__(self):
        pass

    def compute_area(self):
        print("Subclasses must implement compute_area() method.")

class Triangle(Shape):
    def __init__(self, base, height):
        super().__init__()
        self.base = base
        self.height = height

    def compute_area(self):
        area = 0.5 * self.base * self.height
        return area

class Circle(Shape):
    def __init__(self, radius):
        super().__init__()
        self.radius = radius

    def compute_area(self):
        area = 3.14159 * self.radius *self.radius
        return area


triangle = Triangle(4, 6)
triangle_area = triangle.compute_area()
print("Triangle Area:", triangle_area)

circle = Circle(5)
circle_area = circle.compute_area()
print("Circle Area:", circle_area)

print("QUESTION 2")

class Employee:
    def __init__(self, emp_name, emp_id, salary):
        self.emp_name = emp_name
        self.emp_id = emp_id
        self.salary = salary

    def salary_status(self):
        print("Employee ID:",self.emp_id)
        print("Employee Name:",self.emp_name)
        print("Salary: ",self.salary)


class BuildingManager(Employee):
    def __init__(self, emp_name, emp_id):
        super().__init__(emp_name, emp_id, 10000)


class ProcurementManager(Employee):
    def __init__(self, emp_name, emp_id):
        super().__init__(emp_name, emp_id, 12000)


class LogisticsManager(Employee):
    def __init__(self, emp_name, emp_id):
        super().__init__(emp_name, emp_id, 15000)


def main():
    employees = []
    employees.append(BuildingManager("John Doe", 1))
    employees.append(ProcurementManager("Jane Smith", 2))
    employees.append(LogisticsManager("Mike Johnson", 3))

    for employee in employees:
        employee.salary_status()
        print()


if __name__ == '__main__':
    main()
